#ifndef _H_ietf_i2rs_rib
#define _H_ietf_i2rs_rib
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.12-0

  Combined SIL header
  module ietf-i2rs-rib
  revision 2018-12-05
  namespace urn:ietf:params:xml:ns:yang:ietf-i2rs-rib
  organization IETF I2RS (Interface to Routing System) Working Group

 */

#include <libxml/xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_ietf_i2rs_rib_M_ietf_i2rs_rib (const xmlChar *)"ietf-i2rs-rib"
#define y_ietf_i2rs_rib_R_ietf_i2rs_rib (const xmlChar *)"2018-12-05"

#define y_ietf_i2rs_rib_N_error_code (const xmlChar *)"error-code"
#define y_ietf_i2rs_rib_N_failed_count (const xmlChar *)"failed-count"
#define y_ietf_i2rs_rib_N_failed_routes (const xmlChar *)"failed-routes"
#define y_ietf_i2rs_rib_N_failure_detail (const xmlChar *)"failure-detail"
#define y_ietf_i2rs_rib_N_nexthop (const xmlChar *)"nexthop"
#define y_ietf_i2rs_rib_N_prefix (const xmlChar *)"prefix"
#define y_ietf_i2rs_rib_N_return_failure_detail (const xmlChar *)"return-failure-detail"
#define y_ietf_i2rs_rib_N_route_add (const xmlChar *)"route-add"
#define y_ietf_i2rs_rib_N_route_delete (const xmlChar *)"route-delete"
#define y_ietf_i2rs_rib_N_route_index (const xmlChar *)"route-index"
#define y_ietf_i2rs_rib_N_route_preference (const xmlChar *)"route-preference"
#define y_ietf_i2rs_rib_N_success_count (const xmlChar *)"success-count"

/* container /route-add/input */
typedef struct y_ietf_i2rs_rib_T_route_add_input_ {
  boolean return_failure_detail;
  xmlChar *prefix;
  xmlChar *nexthop;
  uint32 route_preference;
} y_ietf_i2rs_rib_T_route_add_input;

/* list /route-add/output/failure-detail/failed-routes */
typedef struct y_ietf_i2rs_rib_T_route_add_output_failure_detail_failed_routes_ {
  dlq_hdr_t qhdr;
  uint32 route_index;
  uint32 error_code;
} y_ietf_i2rs_rib_T_route_add_output_failure_detail_failed_routes;

/* container /route-add/output/failure-detail */
typedef struct y_ietf_i2rs_rib_T_route_add_output_failure_detail_ {
  dlq_hdr_t failed_routes;
} y_ietf_i2rs_rib_T_route_add_output_failure_detail;

/* container /route-add/output */
typedef struct y_ietf_i2rs_rib_T_route_add_output_ {
  uint32 success_count;
  uint32 failed_count;
  y_ietf_i2rs_rib_T_route_add_output_failure_detail failure_detail;
} y_ietf_i2rs_rib_T_route_add_output;

/* rpc /route-add */
typedef struct y_ietf_i2rs_rib_T_route_add_ {
  y_ietf_i2rs_rib_T_route_add_input input;
  y_ietf_i2rs_rib_T_route_add_output output;
} y_ietf_i2rs_rib_T_route_add;

/* container /route-delete/input */
typedef struct y_ietf_i2rs_rib_T_route_delete_input_ {
  boolean return_failure_detail;
  xmlChar *prefix;
  xmlChar *nexthop;
  uint32 route_preference;
} y_ietf_i2rs_rib_T_route_delete_input;

/* list /route-delete/output/failure-detail/failed-routes */
typedef struct y_ietf_i2rs_rib_T_route_delete_output_failure_detail_failed_routes_ {
  dlq_hdr_t qhdr;
  uint32 route_index;
  uint32 error_code;
} y_ietf_i2rs_rib_T_route_delete_output_failure_detail_failed_routes;

/* container /route-delete/output/failure-detail */
typedef struct y_ietf_i2rs_rib_T_route_delete_output_failure_detail_ {
  dlq_hdr_t failed_routes;
} y_ietf_i2rs_rib_T_route_delete_output_failure_detail;

/* container /route-delete/output */
typedef struct y_ietf_i2rs_rib_T_route_delete_output_ {
  uint32 success_count;
  uint32 failed_count;
  y_ietf_i2rs_rib_T_route_delete_output_failure_detail failure_detail;
} y_ietf_i2rs_rib_T_route_delete_output;

/* rpc /route-delete */
typedef struct y_ietf_i2rs_rib_T_route_delete_ {
  y_ietf_i2rs_rib_T_route_delete_input input;
  y_ietf_i2rs_rib_T_route_delete_output output;
} y_ietf_i2rs_rib_T_route_delete;
/********************************************************************
* FUNCTION y_ietf_i2rs_rib_init
* 
* initialize the ietf-i2rs-rib server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_ietf_i2rs_rib_init (
  const xmlChar *modname,
  const xmlChar *revision);

/********************************************************************
* FUNCTION y_ietf_i2rs_rib_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_ietf_i2rs_rib_init2 (void);

/********************************************************************
* FUNCTION y_ietf_i2rs_rib_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_ietf_i2rs_rib_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
